import time
import pandas as pd
import numpy as np

CITY_DATA = {'chicago': 'chicago.csv', 'Chicago': 'chicago.csv',
             'new york': 'new_york_city.csv', 'New York': 'new_york_city.csv',
             'washington': 'washington.csv', 'Washington': 'washington.csv'}


def get_filters():

    print("\n Welcome to the program")
    print('Let\'s explore some US bikeshare data!')

    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs

    while True:
        city = input('\nWhich city would you like to filter by? new york, chicago or washington? \n').lower()
        if city not in CITY_DATA.keys():
            print('Sorry, that is valid input. Try again please.')
            continue
        else:
            break

    # TO DO: get user input for month (all, january, february, ... , june)
    months = ['january', 'february', 'march', 'april', 'may', 'june', 'all']
    while True:
        month = input('\nWhich month would you like to filter by? january, february, march, april, may, june or enter \'all\' if you want no filter\n').lower()
        if month not in months:
            print('Sorry, that is valid input. Try again.')
            continue
        else:
            break
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    DAY_LIST = ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    while True:
        day = input('\nAre you looking for a particular day? If so, enter the day as follows: sunday, monday, tuesday, wednesday, thursday, friday, saturday or enter \'all\' if you want no filter\n').lower()
        if day not in DAY_LIST:
            print('Sorry, that is valid input. Try again.')
            continue
        else:
            break

    return city, month, day

def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.
    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    # load data for city
    df = pd.read_csv(CITY_DATA[city])

    # Convert the start time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # Month and day of week from start time to creat new column
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()

    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['month'] == month]

    if day != 'all':
        df = df[df['day_of_week'] == day.title()]


    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    popular_month = df['month'].mode()[0]
    print(f"Most popular month (1 = January, 2 = feburary, ... ): {popular_month}")

     # TO DO: display the most common day of week
    popular_day = df['day_of_week'].mode()[0]
    print(f"\nMost Popular Day: {popular_day}")

    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].mode()[0]
    print(f"\nMost Popular Start Time Hour: {popular_hour}")

    print('-' * 80)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    moststart  = df['Start Station'].mode()[0]
    print(f"\nThe most commonly used Start Station:{moststart }")

   # TO DO: display most commonly used end station
    mostend  = df["End Station"].mode()[0]
    print(f"\nThe most commonly used end Satation: {mostend }")

    # TO DO: display most frequent combination of start station and end station trip
    df['Start To End'] = df['Start Station'].str.cat(df['End Station'], sep=' to ')
    combination = df['Start To End'].mode()[0]
    print(f"\nThe most frequent combination of trips are from: {combination} .")
       
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 80)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time >>
    total_duration = df['Trip Duration'].sum()

    minute, second = divmod(total_duration, 60)

    hour, minute = divmod(minute, 60)
    print(f"\nThe total of the trip duration is {hour} hours, {minute} minutes and {second} seconds.")

    # TO DO: display mean travel time >>
    average_duration = round(df['Trip Duration'].mean())
    mins, sec = divmod(average_duration, 60)
    if mins > 60:
        hrs, mins = divmod(mins, 60)
        print(f"\nThe Average trip is {hrs} hourse, {mins} minutes and {sec} seconds.")
    else:
        print(f"\nThe Average trip is {mins} minutes, {sec} seconds.")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    user_type = df['User Type'].value_counts()
    print(f"The types of users by number is  {user_type}")

    # TO DO: Display counts of gender
    try:
        gender = df['Gender'].value_counts()
        print(f"\nThe types of users gender is: {gender}")
    except:
        print("\nThere is no 'Gender' column in this file")
       
    # TO DO: Display earliest, most recent, and most common year of birth
    try:
        old = int(df['Birth Year'].min())
        print("The oldest user is born in", old)
        reccent = int(df['Birth Year'].max())
        print("The youngest user is born in", reccent)
        common = int(df['Birth Year'].mode()[0])
        print("Most users are born in", common)
    except:
        print("\nThere is no birth year in the file")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-' * 80)

   
def display_data(df):
        # Display 5 row
    inp = ['yes', 'no']
    answ = ''
    counter = 0
    while answ not in inp:
        answ = input("\nDo you look forward to see the first 5 row of the data ?\n please enter (yes) or (no)\n").lower
    if answ == "yes":
        print(df.head(5))
    elif answ not in inp:
        print("\nThis is valied input ")
    while answ == 'yes':
        input("Do you look forward to see more ?").lower()
        counter += 5
        # Display the next 5 row
    if answ == 'yes':
        print(df[counter:counter + 5])
    elif answ != 'yes':
        print("\nLooks like that's it")
       
    print('-' * 80)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df)
           
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
    main()